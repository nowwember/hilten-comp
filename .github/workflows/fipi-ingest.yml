name: FIPI Ingest (EGE basic)

on:
  workflow_dispatch:
    inputs:
      startPage:
        description: "Start page"
        required: true
        default: "1"
      endPage:
        description: "End page"
        required: true
        default: "10"
      limit:
        description: "Max cards (safety)"
        required: true
        default: "400"
      enforceGate:
        description: "Enforce MVP gate (2 per subtopic)"
        required: false
        type: boolean
        default: false
      runToCoverage:
        description: "Use run-to-coverage pipeline"
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

jobs:
  ingest:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Install Playwright (Chromium)
        run: npx playwright install --with-deps chromium

      - name: Ingest + Curate + Coverage
        if: ${{ github.event.inputs.runToCoverage != 'true' }}
        env:
          FIPI_EGE_BASIC_START: ${{ secrets.FIPI_EGE_BASIC_START }}
          INGEST_USER_AGENT: ${{ secrets.INGEST_USER_AGENT }}
        run: |
          echo "Run ingest pages ${{ github.event.inputs.startPage }}..${{ github.event.inputs.endPage }}, limit=${{ github.event.inputs.limit }}"
          echo "Node: $(node -v)"
          echo "NPM:  $(npm -v)"
          which tsx || echo "tsx not preinstalled (ok, using npx)"
          echo "Tip: Logs include lines with 'Visiting page N (frameURL=...)' from the ingest script."
          npx tsx scripts/fipi/ingest.ts --exam=ege --level=basic --startPage=${{ github.event.inputs.startPage }} --endPage=${{ github.event.inputs.endPage }} --limit=${{ github.event.inputs.limit }} | tee ingest.log
          npx tsx scripts/fipi/curate.ts --exam=ege --level=basic --limit=1200
          npx tsx scripts/fipi/report-coverage.ts

      - name: Run to Coverage (batches)
        if: ${{ github.event.inputs.runToCoverage == 'true' }}
        env:
          FIPI_EGE_BASIC_START: ${{ secrets.FIPI_EGE_BASIC_START }}
          INGEST_USER_AGENT: ${{ secrets.INGEST_USER_AGENT }}
        run: |
          echo "Run-to-coverage mode from page ${{ github.event.inputs.startPage }} with limit/batch=${{ github.event.inputs.limit }}"
          npx tsx scripts/fipi/run-to-coverage.ts --startPage=${{ github.event.inputs.startPage }} --pagesPerBatch=10 --maxPages=200 --limitPerBatch=${{ github.event.inputs.limit }} | tee ingest.log

      - name: Frame URLs visited (from logs)
        run: |
          echo "Frame URLs visited (parsed from ingest logs):"
          if [ -f ingest.log ]; then
            grep -E "frameURL=" ingest.log || echo "No explicit frameURL lines found."
          else
            echo "ingest.log not found."
          fi

      - name: Ingest summary (RAW counts per page)
        run: |
          echo "RAW counts per page (from ingest logs):"
          if [ -f ingest.log ]; then
            grep -E "Page [0-9]+ id stats" ingest.log || echo "No page stats found."
          else
            echo "ingest.log not found."
          fi

      - name: MVP gate
        if: ${{ inputs.enforceGate == 'true' }}
        run: npm run fipi:mvp:check

      - name: Save coverage summary
        if: always()
        run: |
          echo "FIPI Ingest Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pages:** ${{ github.event.inputs.startPage }}..${{ github.event.inputs.endPage }}  |  **Limit:** ${{ github.event.inputs.limit }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f scripts/fipi/reports/coverage.md ]; then
            echo "### Coverage (excerpt)" >> $GITHUB_STEP_SUMMARY
            head -n 60 scripts/fipi/reports/coverage.md >> $GITHUB_STEP_SUMMARY
          else
            echo "_coverage.md not found_" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload RAW
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fipi-raw
          path: data/fipi/_raw/**/*
          if-no-files-found: warn
          retention-days: 7

      - name: Upload labeled
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fipi-labeled
          path: data/fipi/ege/basic
          if-no-files-found: warn
          retention-days: 7

      - name: Upload review
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fipi-review
          path: data/fipi/_review
          if-no-files-found: warn
          retention-days: 7

      - name: Upload debug
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fipi-debug
          path: scripts/fipi/debug
          if-no-files-found: warn
          retention-days: 7

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fipi-reports
          path: scripts/fipi/reports
          if-no-files-found: warn
          retention-days: 7

      - name: Commit changes (if any)
        if: ${{ inputs.enforceGate != 'true' }}
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "chore(fipi): ingest $(date -u +%Y%m%d%H%M)"
          git push origin HEAD:${{ github.ref_name }}

      - name: How to rerun (help)
        run: |
          echo "Run from Actions â†’ FIPI Ingest (EGE basic):"
          echo "startPage=1 endPage=10 limit=400 enforceGate=false"
          echo "Use branch with updated workflow (or merge to main)."

      # PR creation skipped in this hardened flow; push goes to current ref


