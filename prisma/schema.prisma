generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  passwordHash  String
  role          Role     @default(USER)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  submissions   Submission[]
  sessions      Session[]
}

model Task {
  id         String      @id @default(cuid())
  title      String      @unique
  topic      String
  difficulty Difficulty  @default(EASY)
  content    String
  answer     String
  authorId   String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  submissions Submission[]
}

model Submission {
  id        String   @id @default(cuid())
  userId    String
  taskId    String
  answer    String
  isCorrect Boolean
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])
}

// NextAuth optional models (kept for future compatibility)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AiChatSession {
  id        String   @id @default(cuid())
  userId    String?
  taskId    String
  messages  Json     @db.JsonB
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, taskId], map: "idx_user_task")
}
